#! /usr/bin/env node
"use strict";

var _ora = _interopRequireDefault(require("ora"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _getHelpText = _interopRequireDefault(require("../helpers/getHelpText"));

var _lighthouseCheck = _interopRequireDefault(require("../lighthouseCheck"));

var _constants = require("../constants");

var _arguments = require("../helpers/arguments");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const defaultOptions = {
  author: undefined,
  apiToken: undefined,
  awsAccessKeyId: undefined,
  awsBucket: undefined,
  awsRegion: undefined,
  awsSecretAccessKey: undefined,
  branch: undefined,
  configFile: undefined,
  emulatedFormFactor: undefined,
  locale: undefined,
  help: undefined,
  outputDirectory: undefined,
  pr: undefined,
  sha: undefined,
  slackWebhookUrl: undefined,
  tag: undefined,
  timeout: undefined,
  throttling: undefined,
  throttlingMethod: undefined,
  urls: undefined,
  verbose: false,
  wait: undefined
}; // override options with any that are passed in as arguments

let params = (0, _arguments.convertOptionsFromArguments)(defaultOptions);

const init = async () => {
  const spinner = (0, _ora.default)(`${_constants.NAME}: Running...\n`);

  try {
    if (params.configFile) {
      const configFile = _path.default.resolve(params.configFile);

      const configJsonString = _fs.default.readFileSync(configFile).toString();

      const configJson = JSON.parse(configJsonString); // extend params with config json file contents

      params = { ...params,
        ...configJson
      };
    }

    if (!params.verbose) {
      console.log('\n');
      spinner.start();
    } // if urls are in string format, we need to split them int an array,
    // otherwise they may already be an array from a config json file.


    const urls = typeof params.urls !== 'string' ? params.urls : params.urls.split(',');
    await (0, _lighthouseCheck.default)({ ...params,
      urls
    });
    process.exit();
  } catch (error) {
    if (!params.verbose) {
      spinner.stop();
    } else {
      console.log('\n');
    }

    console.log('‚ùå  Something went wrong while attempting to enqueue URLs for Lighthouse. See the error below.\n\n', error);
    console.log('\n');
    process.exit(1);
  }
};

if (params.help) {
  console.log((0, _getHelpText.default)(_constants.NAME));
} else {
  init();
}