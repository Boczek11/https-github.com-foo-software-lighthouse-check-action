"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fetch = _interopRequireDefault(require("./fetch"));

var _lighthouseAuditTitles = _interopRequireDefault(require("./lighthouseAuditTitles"));

var _LighthouseCheckError = _interopRequireDefault(require("./LighthouseCheckError"));

var _errorCodes = require("./errorCodes");

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const resultTableHeader = `
| Audit | Score |
| ----- | ----- |
`;

var _default = async ({
  prCommentAccessToken,
  prCommentUrl,
  results,
  verbose
}) => {
  try {
    let markdown = `## Lighthouse Audits`;
    results.forEach((result, index) => {
      // the url
      markdown += `\n\n${result.url}`; // the table header

      markdown += `\n\n${resultTableHeader}`; // populate the table

      Object.keys(result.scores).forEach(current => {
        markdown += `| ${_lighthouseAuditTitles.default[current]} | ${result.scores[current]} |\n`;
      }); // if we have a URL for the full report

      if (result.report) {
        markdown += `\n\n${result.report}`;
      } // add a horizontal line


      if (index + 1 < results.length) {
        markdown += `\n\n<hr />`;
      }
    });
    const result = await (0, _fetch.default)(prCommentUrl, {
      method: 'post',
      body: JSON.stringify({
        event: 'COMMENT',
        body: markdown
      }),
      headers: {
        'content-type': 'application/json',
        authorization: `token ${prCommentAccessToken}`
      }
    });
    const jsonResult = await result.json();

    if (!jsonResult.id) {
      throw new _LighthouseCheckError.default(jsonResult.message || 'something went wrong', {
        code: _errorCodes.ERROR_UNEXPECTED_RESPONSE,
        data: jsonResult
      });
    }
  } catch (error) {
    if (verbose) {
      console.log(`${_constants.NAME}:`, error);
    } // we still need to kill the process


    throw error;
  }
};

exports.default = _default;